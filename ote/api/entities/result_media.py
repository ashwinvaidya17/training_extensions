"""This module implements the ResultMediaEntity"""
# Copyright (C) 2021-2022 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

from typing import Optional

import numpy as np
from ote.api.entities.annotation import Annotation, AnnotationSceneEntity
from ote.api.entities.label import LabelEntity
from ote.api.entities.metadata import IMetadata
from ote.api.entities.shapes.rectangle import Rectangle


# pylint: disable=too-many-instance-attributes; Requires refactor
class ResultMediaEntity(IMetadata):
    """
    Represents a media (e.g. an image which was generated by a task).

    For instance, a :class:`ResultMediaEntity` could be an attention map generated by a
    classification task.

    The result media contains media data, which is associated with a
    :class:`~ote.api.entities.annotation.AnnotationSceneEntity` and
    related to an optional :class:`~ote.api.entities.label.LabelEntity`.

    :param name: Name.
    :param type: The type of data (e.g. Attention map). This type is descriptive.
    :param annotation_scene: Associated annotation which was generated by the task
                             alongside this media.
    :param numpy: The data as a numpy array.
    :param roi: The ROI covered by this media. If null, assume the entire image.
    :param label: A label associated with this media.
    """

    # pylint: disable=redefined-builtin, too-many-arguments;
    def __init__(
        self,
        name: str,
        type: str,
        annotation_scene: AnnotationSceneEntity,
        numpy: np.ndarray,
        roi: Optional[Annotation] = None,
        label: Optional[LabelEntity] = None,
    ):
        self.name = name
        self.type = type
        self.annotation_scene = annotation_scene
        self.roi = (
            Annotation(Rectangle.generate_full_box(), labels=[]) if roi is None else roi
        )
        self.label = label
        self.numpy = numpy

    def __repr__(self):
        return (
            "ResultMediaEntity("
            f"name={self.name}, "
            f"type={self.type}, "
            f"annotation_scene={self.annotation_scene}, "
            f"numpy={self.numpy}, "
            f"roi={self.roi}, "
            f"label={self.label})"
        )

    @property
    def width(self) -> int:
        """
        Returns the width of the result media.
        """
        return self.numpy.shape[1]

    @property
    def height(self) -> int:
        """
        Returns the height of the result media.
        """
        return self.numpy.shape[0]

    @property
    def numpy(self) -> np.ndarray:
        """
        Returns the data.
        """
        return self._numpy

    @numpy.setter
    def numpy(self, value):
        self._numpy = value

    def __eq__(self, other):
        if isinstance(other, ResultMediaEntity):
            return (
                self.annotation_scene == other.annotation_scene
                and self.roi == other.roi
            )
        return False
